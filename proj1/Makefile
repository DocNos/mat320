# Project 1 - Complex Number Operations with Roots of Unity
# MAT 320 - Digital Signal Processing
# Matt Klassen, Instructor
# Nixx Varboncoeur - 09_15-25
##### AI Disclosure
# Makefile generated by Claude Sonnet 4
# Debugging support via Claude Code extension

# Compiler and flags
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -pedantic
DEBUGFLAGS = -g -O0 -DDEBUG
RELEASEFLAGS = -O2 -DNDEBUG

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin
INPUTDIR = input
OUTPUTDIR = output

# Target executable name
TARGET = complex_calc

# Source files
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
OBJECTS = $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES))

# Default target (release build)
all: release

# Release build
release: CXXFLAGS += $(RELEASEFLAGS)
release: directories $(BINDIR)/$(TARGET)

# Debug build
debug: CXXFLAGS += $(DEBUGFLAGS)
debug: directories $(BINDIR)/$(TARGET)_debug

# Create necessary directories
directories:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(BINDIR)
	@mkdir -p $(INPUTDIR)
	@mkdir -p $(OUTPUTDIR)

# Link object files to create executable (release)
$(BINDIR)/$(TARGET): $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o $@ $^ -lm
	@echo "Build complete: $@"

# Link object files to create executable (debug)
$(BINDIR)/$(TARGET)_debug: $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o $@ $^ -lm
	@echo "Debug build complete: $@"

# Compile source files to object files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

# Clean build files
clean:
	rm -rf $(OBJDIR)/*.o
	rm -f $(BINDIR)/$(TARGET)
	rm -f $(BINDIR)/$(TARGET)_debug
	rm -f $(BINDIR)/part1 $(BINDIR)/part2 $(BINDIR)/part3 $(BINDIR)/part4
	rm -f $(INPUTDIR)/*.txt
	rm -f $(OUTPUTDIR)/*.txt
	@echo "Clean complete"

# Full clean (including directories)
distclean: clean
	rm -rf $(OBJDIR)
	rm -rf $(BINDIR)
	rm -rf $(OUTPUTDIR)/*
	@echo "Distribution clean complete"

# Run basic tests for each part
test-basic: release
	@echo "Running basic tests..."
	@echo "========================"
	@echo "Test Part 1: Rotation (test1.txt, angle=0.25)"
	$(BINDIR)/$(TARGET) 1 3 0.25 $(INPUTDIR)/test1.txt
	@echo "========================"
	@echo "Test Part 2: Sum of powers (N=8, k=5)"
	$(BINDIR)/$(TARGET) 2 8 5
	@echo "========================"
	@echo "Test Part 3: Inner product (vec1.txt, vec2.txt)"
	$(BINDIR)/$(TARGET) 3 3 $(INPUTDIR)/vec1.txt $(INPUTDIR)/vec2.txt
	@echo "========================"
	@echo "Test Part 4: DFT component (signal.txt)"
	$(BINDIR)/$(TARGET) 4 4 $(INPUTDIR)/signal.txt

# Run all comprehensive tests
test: release test1 test2 test3 test4
	@echo "All tests completed!"

# Test individual parts
test1: release
	@echo "Testing Part 1: Rotation (positive and negative angles)"
	$(BINDIR)/$(TARGET) 1 3 0.25 $(INPUTDIR)/test1.txt
	$(BINDIR)/$(TARGET) 1 3 -0.25 $(INPUTDIR)/test1.txt
	$(BINDIR)/$(TARGET) 1 4 0.5 $(INPUTDIR)/test2.txt
	$(BINDIR)/$(TARGET) 1 4 -0.5 $(INPUTDIR)/test2.txt

# Test with instructor-provided test cases
test-instructor: release generate-instructor-files
	@echo "Testing with instructor-provided test cases..."
	@echo "========================"
	@echo "Part 1: Rotation tests"
	$(BINDIR)/$(TARGET) 1 2 0.25 $(INPUTDIR)/f1.txt
	$(BINDIR)/$(TARGET) 1 2 0.25 $(INPUTDIR)/f2.txt
	@echo "========================"
	@echo "Part 2: Sum of unity tests"
	$(BINDIR)/$(TARGET) 2 4 2
	$(BINDIR)/$(TARGET) 2 3 2
	$(BINDIR)/$(TARGET) 2 8 7
	@echo "========================"
	@echo "Part 3: Dot product test"
	$(BINDIR)/$(TARGET) 3 2 $(INPUTDIR)/f1.txt $(INPUTDIR)/f2.txt
	@echo "========================"
	@echo "Part 4: DFT component tests"
	$(BINDIR)/$(TARGET) 4 2 $(INPUTDIR)/f1.txt
	$(BINDIR)/$(TARGET) 4 2 $(INPUTDIR)/f2.txt

test2: release
	@echo "Testing Part 2: Sum of powers"
	$(BINDIR)/$(TARGET) 2 8 5
	$(BINDIR)/$(TARGET) 2 4 3
	$(BINDIR)/$(TARGET) 2 6 4

test3: release
	@echo "Testing Part 3: Inner product" 
	$(BINDIR)/$(TARGET) 3 3 $(INPUTDIR)/vec1.txt $(INPUTDIR)/vec2.txt
	$(BINDIR)/$(TARGET) 3 4 $(INPUTDIR)/vec3.txt $(INPUTDIR)/vec4.txt

test4: release
	@echo "Testing Part 4: DFT component"
	$(BINDIR)/$(TARGET) 4 4 $(INPUTDIR)/signal.txt
	$(BINDIR)/$(TARGET) 4 3 $(INPUTDIR)/signal2.txt

# Generate expected output files with correct answers
generate-output:
	@mkdir -p $(OUTPUTDIR)
	@echo "Generating expected output files..."
	@echo "Part 1 outputs:"
	@echo "0.0 + 1.0i" > $(OUTPUTDIR)/part1_test1_pos.txt
	@echo "-1.0 + 0.0i" >> $(OUTPUTDIR)/part1_test1_pos.txt
	@echo "0.0 - 1.0i" >> $(OUTPUTDIR)/part1_test1_pos.txt
	@echo "0.0 - 1.0i" > $(OUTPUTDIR)/part1_test1_neg.txt
	@echo "1.0 + 0.0i" >> $(OUTPUTDIR)/part1_test1_neg.txt
	@echo "0.0 + 1.0i" >> $(OUTPUTDIR)/part1_test1_neg.txt
	@echo "Part 1 test2 outputs (4 numbers, 180Â° rotation):"
	@echo "-1.0 - 1.0i" > $(OUTPUTDIR)/part1_test2_pos.txt
	@echo "-2.0 + 1.0i" >> $(OUTPUTDIR)/part1_test2_pos.txt
	@echo "1.0 - 2.0i" >> $(OUTPUTDIR)/part1_test2_pos.txt
	@echo "0.0 + 3.0i" >> $(OUTPUTDIR)/part1_test2_pos.txt
	@echo "-1.0 - 1.0i" > $(OUTPUTDIR)/part1_test2_neg.txt
	@echo "-2.0 + 1.0i" >> $(OUTPUTDIR)/part1_test2_neg.txt
	@echo "1.0 - 2.0i" >> $(OUTPUTDIR)/part1_test2_neg.txt
	@echo "0.0 + 3.0i" >> $(OUTPUTDIR)/part1_test2_neg.txt
	@echo "Part 2 outputs:"
	@echo "0.0 + 2.41i" > $(OUTPUTDIR)/part2_8_5.txt
	@echo "0.0 + 1.0i" > $(OUTPUTDIR)/part2_4_3.txt
	@echo "0.0 + 1.73i" > $(OUTPUTDIR)/part2_6_4.txt
	@echo "Part 3 outputs:"
	@echo "2.0 + 2.0i" > $(OUTPUTDIR)/part3_vec1_vec2.txt
	@echo "5.5 + 4.5i" > $(OUTPUTDIR)/part3_vec3_vec4.txt
	@echo "Part 4 outputs:"
	@echo "4.0 + 0.0i" > $(OUTPUTDIR)/part4_signal.txt
	@echo "3.0 + 2.0i" > $(OUTPUTDIR)/part4_signal2.txt
	@echo "Instructor test expected outputs:"
	@echo "-1.0 + 1.0i" > $(OUTPUTDIR)/instructor_part1_f1.txt
	@echo "1.0 + 2.0i" >> $(OUTPUTDIR)/instructor_part1_f1.txt
	@echo "-1.0 + 3.0i" > $(OUTPUTDIR)/instructor_part1_f2.txt
	@echo "3.0 + 1.0i" >> $(OUTPUTDIR)/instructor_part1_f2.txt
	@echo "1.0 + 1.0i" > $(OUTPUTDIR)/instructor_part2_4_2.txt
	@echo "0.5 + 0.866025i" > $(OUTPUTDIR)/instructor_part2_3_2.txt
	@echo "-0.707107 + 0.707107i" > $(OUTPUTDIR)/instructor_part2_8_7.txt
	@echo "9.0 + 7.0i" > $(OUTPUTDIR)/instructor_part3_f1_f2.txt
	@echo "-1.0 + 2.0i" > $(OUTPUTDIR)/instructor_part4_f1.txt
	@echo "2.0 + 4.0i" > $(OUTPUTDIR)/instructor_part4_f2.txt
	@echo "Expected output files generated in $(OUTPUTDIR)/"

# Generate sample input files for testing
generate-test-files:
	@mkdir -p $(INPUTDIR)
	@echo "Generating test input files..."
	@echo "1.0 + 0.0i" > $(INPUTDIR)/test1.txt
	@echo "0.0 + 1.0i" >> $(INPUTDIR)/test1.txt
	@echo "-1.0 + 0.0i" >> $(INPUTDIR)/test1.txt
	@echo "1.0 + 1.0i" > $(INPUTDIR)/test2.txt
	@echo "2.0 - 1.0i" >> $(INPUTDIR)/test2.txt
	@echo "-1.0 + 2.0i" >> $(INPUTDIR)/test2.txt
	@echo "0.0 - 3.0i" >> $(INPUTDIR)/test2.txt
	@echo "2.0 + 3.0i" > $(INPUTDIR)/vec1.txt
	@echo "1.0 - 1.0i" >> $(INPUTDIR)/vec1.txt
	@echo "0.5 + 0.5i" >> $(INPUTDIR)/vec1.txt
	@echo "1.0 + 0.0i" > $(INPUTDIR)/vec2.txt
	@echo "0.0 + 1.0i" >> $(INPUTDIR)/vec2.txt
	@echo "1.0 + 1.0i" >> $(INPUTDIR)/vec2.txt
	@echo "3.0 + 2.0i" > $(INPUTDIR)/vec3.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/vec3.txt
	@echo "-1.0 + 1.0i" >> $(INPUTDIR)/vec3.txt
	@echo "0.0 + 2.0i" >> $(INPUTDIR)/vec3.txt
	@echo "2.0 - 1.0i" > $(INPUTDIR)/vec4.txt
	@echo "1.0 + 1.0i" >> $(INPUTDIR)/vec4.txt
	@echo "0.5 + 0.0i" >> $(INPUTDIR)/vec4.txt
	@echo "-1.0 + 0.5i" >> $(INPUTDIR)/vec4.txt
	@echo "1.0 + 0.0i" > $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "2.0 + 1.0i" > $(INPUTDIR)/signal2.txt
	@echo "0.0 - 1.0i" >> $(INPUTDIR)/signal2.txt
	@echo "1.0 + 2.0i" >> $(INPUTDIR)/signal2.txt
	@echo "Test files generated in $(INPUTDIR)/"

# Generate instructor-provided test files
generate-instructor-files:
	@mkdir -p $(INPUTDIR)
	@echo "Generating instructor test files..."
	@echo "1.0 + 1.0i" > $(INPUTDIR)/f1.txt
	@echo "2.0 - 1.0i" >> $(INPUTDIR)/f1.txt
	@echo "3.0 + 1.0i" > $(INPUTDIR)/f2.txt
	@echo "1.0 - 3.0i" >> $(INPUTDIR)/f2.txt
	@echo "Instructor test files generated: f1.txt, f2.txt"


test-files: generate-test-files generate-output


# Help target
help:
	@echo "Math 320 Project Makefile"
	@echo "========================="
	@echo "Available targets:"
	@echo "  make              - Build release version"
	@echo "  make debug        - Build debug version with symbols"
	@echo "  make clean        - Remove object files and executables"
	@echo "  make distclean    - Remove all generated files and directories"
	@echo "  make test         - Run all comprehensive tests"
	@echo "  make test-basic   - Run basic tests only"
	@echo "  make test-instructor - Run instructor test cases"
	@echo "  make test1        - Test Part 1 only (rotation)"
	@echo "  make test2        - Test Part 2 only (sum of powers)"
	@echo "  make test3        - Test Part 3 only (inner product)"
	@echo "  make test4        - Test Part 4 only (DFT component)"
	@echo "  make generate-test-files - Create sample input files"
	@echo "  make generate-instructor-files - Create instructor test files"
	@echo "  make generate-output - Create expected output files"
	@echo "  make help         - Show this help message"
	@echo ""
	@echo "Usage examples:"
	@echo "  Part 1: $(BINDIR)/$(TARGET) 1 N angle input.txt"
	@echo "  Part 2: $(BINDIR)/$(TARGET) 2 N k"
	@echo "  Part 3: $(BINDIR)/$(TARGET) 3 N vec1.txt vec2.txt"
	@echo "  Part 4: $(BINDIR)/$(TARGET) 4 N input.txt"

# Specific compilation rules for individual parts (if needed)
part1: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part1 $^ -lm

part2: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part2 $^ -lm

part3: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part3 $^ -lm

part4: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part4 $^ -lm

# Phony targets (not actual files)
.PHONY: all release debug clean distclean test test-basic test-instructor test1 test2 test3 test4 generate-test-files generate-instructor-files generate-output help directories part1 part2 part3 part4

# Dependencies (optional - can be auto-generated)
-include $(OBJECTS:.o=.d)

# Auto-generate dependencies
$(OBJDIR)/%.d: $(SRCDIR)/%.cpp
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -MM -MT '$(OBJDIR)/$*.o' $< > $@