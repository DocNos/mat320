# Project 1 - Complex Number Operations with Roots of Unity
# MAT 320 - Digital Signal Processing
# Matt Klassen, Instructor
# Nixx Varboncoeur - 09_15-25
##### AI Disclosure
# Makefile generated by Claude Opus 4.1
# Debugging support via Claude Code extension

# Compiler and flags
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -pedantic
DEBUGFLAGS = -g -O0 -DDEBUG
RELEASEFLAGS = -O2 -DNDEBUG

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin
INPUTDIR = input
OUTPUTDIR = output

# Target executable name
TARGET = complex_calc

# Source files
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
OBJECTS = $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES))

# Default target (release build)
all: release

# Release build
release: CXXFLAGS += $(RELEASEFLAGS)
release: directories $(BINDIR)/$(TARGET)

# Debug build
debug: CXXFLAGS += $(DEBUGFLAGS)
debug: directories $(BINDIR)/$(TARGET)_debug

# Create necessary directories
directories:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(BINDIR)
	@mkdir -p $(INPUTDIR)
	@mkdir -p $(OUTPUTDIR)

# Link object files to create executable (release)
$(BINDIR)/$(TARGET): $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o $@ $^ -lm
	@echo "Build complete: $@"

# Link object files to create executable (debug)
$(BINDIR)/$(TARGET)_debug: $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o $@ $^ -lm
	@echo "Debug build complete: $@"

# Compile source files to object files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

# Clean build files
clean:
	rm -rf $(OBJDIR)/*.o
	rm -f $(BINDIR)/$(TARGET)
	rm -f $(BINDIR)/$(TARGET)_debug
	@echo "Clean complete"

# Full clean (including directories)
distclean: clean
	rm -rf $(OBJDIR)
	rm -rf $(BINDIR)
	rm -rf $(OUTPUTDIR)/*
	@echo "Distribution clean complete"

# Run tests for each part
test: release
	@echo "Running tests..."
	@echo "========================"
	@echo "Test Part 1: Rotation"
	@echo "3 0.25 $(INPUTDIR)/test1.txt" | xargs $(BINDIR)/$(TARGET) 1
	@echo "========================"
	@echo "Test Part 2: Sum of powers"
	$(BINDIR)/$(TARGET) 2 8 5
	@echo "========================"
	@echo "Test Part 3: Inner product"
	@echo "3 $(INPUTDIR)/vec1.txt $(INPUTDIR)/vec2.txt" | xargs $(BINDIR)/$(TARGET) 3
	@echo "========================"
	@echo "Test Part 4: DFT component"
	@echo "4 $(INPUTDIR)/signal.txt" | xargs $(BINDIR)/$(TARGET) 4

# Generate sample input files for testing
generate-test-files:
	@mkdir -p $(INPUTDIR)
	@echo "Generating test input files..."
	@echo "1.0 + 0.0i" > $(INPUTDIR)/test1.txt
	@echo "0.0 + 1.0i" >> $(INPUTDIR)/test1.txt
	@echo "-1.0 + 0.0i" >> $(INPUTDIR)/test1.txt
	@echo "2.0 + 3.0i" > $(INPUTDIR)/vec1.txt
	@echo "1.0 - 1.0i" >> $(INPUTDIR)/vec1.txt
	@echo "0.5 + 0.5i" >> $(INPUTDIR)/vec1.txt
	@echo "1.0 + 0.0i" > $(INPUTDIR)/vec2.txt
	@echo "0.0 + 1.0i" >> $(INPUTDIR)/vec2.txt
	@echo "1.0 + 1.0i" >> $(INPUTDIR)/vec2.txt
	@echo "1.0 + 0.0i" > $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "1.0 + 0.0i" >> $(INPUTDIR)/signal.txt
	@echo "Test files generated in $(INPUTDIR)/"

# Help target
help:
	@echo "Math 320 Project Makefile"
	@echo "========================="
	@echo "Available targets:"
	@echo "  make              - Build release version"
	@echo "  make debug        - Build debug version with symbols"
	@echo "  make clean        - Remove object files and executables"
	@echo "  make distclean    - Remove all generated files and directories"
	@echo "  make test         - Run tests for all parts"
	@echo "  make generate-test-files - Create sample input files"
	@echo "  make help         - Show this help message"
	@echo ""
	@echo "Usage examples:"
	@echo "  Part 1: $(BINDIR)/$(TARGET) 1 N angle input.txt"
	@echo "  Part 2: $(BINDIR)/$(TARGET) 2 N k"
	@echo "  Part 3: $(BINDIR)/$(TARGET) 3 N vec1.txt vec2.txt"
	@echo "  Part 4: $(BINDIR)/$(TARGET) 4 N input.txt"

# Specific compilation rules for individual parts (if needed)
part1: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part1 $^ -lm

part2: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part2 $^ -lm

part3: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part3 $^ -lm

part4: directories $(OBJDIR)/main.o $(OBJDIR)/complex_operations.o
	$(CXX) $(CXXFLAGS) -o $(BINDIR)/part4 $^ -lm

# Phony targets (not actual files)
.PHONY: all release debug clean distclean test generate-test-files help directories part1 part2 part3 part4

# Dependencies (optional - can be auto-generated)
-include $(OBJECTS:.o=.d)

# Auto-generate dependencies
$(OBJDIR)/%.d: $(SRCDIR)/%.cpp
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -MM -MT '$(OBJDIR)/$*.o' $< > $@